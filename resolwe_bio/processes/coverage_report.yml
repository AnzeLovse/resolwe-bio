# =============================
# Processors for Gene Coverae
# ============================
#
# Processors for computing gene coverage. Developed within the Garvan project.
---

- name: coverage:garvan
  version: 1.0.10
  label: Exome Coverage Report
  type: data:coverage
  category: analyses
  persistence: CACHED
  description: >
    An exome coverage report tool developed for the Garvan Institute, Sydney, Australia. The tool reports coverage
    of exons and their potential variants in JSON format.
  input:
    - name: mapping
      label: Mapping file
      type: data:alignment:bam
      required: true
    - name: gtf
      label: Gene Transfer Format file
      type: data:annotation:gtf
      required: true
    - name: variants
      label: Variants in VCF format
      type: data:variants:vcf
      required: false
    - name: filter
      label: Coverage Filter
      type: basic:integer
      description: >
        A threshold filter to use when reporting exon coverage.
      default: 15
      required: true
    - name: genes
      label: List of genes
      type: list:basic:string
      description: >
        Names of genes for which to have coverages reported.
      placeholder: input gene ids
      required: true
      default: [PKD1, TPPP]
  output:
    - name: report
      label: Coverage Report
      type: basic:json
    - name: missing
      label: Missing Genes
      type: basic:json
    - name: jbrowse
      label: JBrowse XML
      type: basic:json
    - name: exon_coverage
      label: Exon coverage in tsv format
      type: basic:file
    - name: transcript_coverage
      label: Transcript coverage in tsv format
      type: basic:file
  static:
    - name: name
      label: Name
      type: basic:string
      default: "Coverage report ({{ mapping.output.bam.file|basename|default:'?' }})"
    - name: tags
      label: Tags
      type: list:basic:string
      default: ["coverage", "JSON"]
      placeholder: new tag
    - name: description
      label: Description
      type: basic:text
      default: "Coverage report of genes in {{ mapping.output.bam.file|basename|default:'?' }} mapping."
  var:
    - name: notes
      label: Notes
      type: basic:text
  run:
    runtime: polyglot
    bash: |
      echo "Generating exome-wide coverage report..."
      filter='{{ filter }}'
      exonage="exonage"
      variants='{{ variants.output.vcf.file }}'
      mapping='{{ mapping.output.bam.file }}'
      annotation='{{ gtf.output.gtf.file }}'
      samtools='{{ proc.slugs_path }}/samtools-0.1.19/samtools'

      echo "{\"proc.rc\":$?}"
      json='{"report": ['
      missingjson="{\"genes\": [ "

      my_genes=""
      {% for g in genes %} my_genes="${my_genes}\"{{g}}\"|" {% endfor %}
      my_genes=${my_genes%?}
      grep -E $'\texon\t'".*gene_name (${my_genes})" ${annotation} > gtf_timmmed.gtf
      echo "{\"proc.progress\":0.1}"

      {% with length=genes|length %}
      {% for g in genes %}
        python -u {{ proc.slugs_path }}/gencloud-20131109/exonage_create2.py "${samtools}" "{{g}}" "gtf_timmmed.gtf" "${mapping}" "${exonage}_{{g}}" warning.log
        echo "{\"proc.progress\": {{ forloop.counter|div:length }}, \"proc.rc\":$?}"
        if [ -s "warning.log" ]; then
          WARN=$(cat warning.log)
          echo "{\"proc.warning\":\"$WARN\"}"
        fi
        
        if [ ! -s ${exonage}_{{g}} ]; then
          missingjson=$missingjson"\"{{g}}\","
        fi
      {% endfor %}
      python -u {{ proc.slugs_path }}/vid_tools-20130515/jsonify_coverage2.py  "${filter}" "${variants}"
      echo "{\"proc.rc\":$?}"
      {% endwith %}

      missingjson="${missingjson%?}"]}
      echo "{\"missing\": $missingjson}"
      echo "{\"exon_coverage\": {\"file\": \"exon_coverage.tsv\"}}"
      echo "{\"transcript_coverage\": {\"file\": \"transcript_coverage.tsv\"}}"
      echo "{\"proc.progress\":1.0,\"proc.rc\":$?}"
